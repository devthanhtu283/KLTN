from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from py_eureka_client import eureka_client
import asyncio
from fastapi.middleware.cors import CORSMiddleware
from openai import OpenAI
from fastapi import File, UploadFile, Form
from fastapi.responses import JSONResponse
import pdfplumber  # H·ªó tr·ª£ ƒë·ªçc PDF d·∫°ng scan
import fitz  # PyMuPDF - Th∆∞ vi·ªán ƒë·ªçc PDF t·ªët nh·∫•t
from pdfminer.high_level import extract_text
import re
from typing import Dict, List

app = FastAPI()

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:4200"],  # Cho ph√©p Angular k·∫øt n·ªëi
    allow_credentials=True,
    allow_methods=["*"],  # Cho ph√©p t·∫•t c·∫£ ph∆∞∆°ng th·ª©c (GET, POST, v.v.)
    allow_headers=["*"],  # Cho ph√©p t·∫•t c·∫£ headers
)

# Kh·ªüi t·∫°o client OpenAI
client = OpenAI(
    base_url="http://localhost:11434/v1",  # URL c·ªßa m√¥ h√¨nh AI
    api_key="ollma"  # API key (n·∫øu c·∫ßn)
)

# L∆∞u tr·ªØ l·ªãch s·ª≠ tr√≤ chuy·ªán
conversation_history = {}

# H√†m kh·ªüi t·∫°o Eureka Client
async def init_eureka():
    await eureka_client.init_async(
        eureka_server="http://localhost:9999",  # ƒê·ªãa ch·ªâ Eureka Server
        app_name="recommendation-service",      # T√™n ·ª©ng d·ª•ng c·ªßa b·∫°n
        instance_port=8000,                     # Port m√† API c·ªßa b·∫°n ch·∫°y
        instance_host="localhost"               # Host m√† API c·ªßa b·∫°n ch·∫°y
    )

# Kh·ªüi t·∫°o Eureka Client khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(init_eureka())

# ƒê·ªãnh nghƒ©a model cho tin nh·∫Øn
class ChatMessage(BaseModel):
    message: str
    user_id: str  # Th√™m tr∆∞·ªùng user_id ƒë·ªÉ ph√¢n bi·ªát ng∆∞·ªùi d√πng

# H√†m x·ª≠ l√Ω tin nh·∫Øn t·ª´ chatbot
def process_message(user_message: str, user_id: str) -> str:
    try:
        # Ki·ªÉm tra xem user_id ƒë√£ c√≥ trong l·ªãch s·ª≠ tr√≤ chuy·ªán ch∆∞a
        if user_id not in conversation_history:
            # Kh·ªüi t·∫°o l·ªãch s·ª≠ tr√≤ chuy·ªán v·ªõi ng·ªØ c·∫£nh ban ƒë·∫ßu
            conversation_history[user_id] = [
                {
                    "role": "system",
                    "content": user_message
                }
            ]

        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ tr√≤ chuy·ªán
        conversation_history[user_id].append({"role": "user", "content": user_message})

        # G·ª≠i to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë·∫øn m√¥ h√¨nh AI
        response = client.chat.completions.create(
            model="gemma2:9b",  # T√™n m√¥ h√¨nh
            messages=conversation_history[user_id]
        )

        # L·∫•y ph·∫£n h·ªìi t·ª´ m√¥ h√¨nh AI
        bot_reply = response.choices[0].message.content

        # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠ tr√≤ chuy·ªán
        conversation_history[user_id].append({"role": "assistant", "content": bot_reply})

        return bot_reply
    except Exception as e:
        # Log l·ªói v√† tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
        print(f"L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: {e}")
        return "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."

# ƒê·ªãnh nghƒ©a endpoint POST cho chatbot
@app.post("/python/chat")
def chat(chat_message: ChatMessage):
    user_message = chat_message.message
    user_id = chat_message.user_id

    if not user_message:
        raise HTTPException(status_code=400, detail="Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

    try:
        # X·ª≠ l√Ω tin nh·∫Øn v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ bot
        bot_response = process_message(user_message, user_id)
        return {"message": bot_response}
    except Exception as e:
        # Log l·ªói v√† tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
        print(f"L·ªói trong endpoint /python/chat: {e}")
        raise HTTPException(status_code=500, detail="L·ªói m√°y ch·ªß n·ªôi b·ªô")

# C√°c endpoint kh√°c
@app.get("/python/hello")
def read_hello():
    return {"message": "Xin ch√†o, ƒë√¢y l√† API c·ªßa t√¥i!"}

@app.get("/python/bye")
def read_bye():
    return {"message": "Bye Bye!!"}

# üîπ Tr√≠ch xu·∫•t n·ªôi dung t·ª´ PDF ch√≠nh x√°c
def extract_text_from_pdf(file_path: str) -> str:
    text = ""

    try:
        # D√πng pdfplumber tr∆∞·ªõc
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"

        # N·∫øu pdfplumber kh√¥ng l·∫•y ƒë∆∞·ª£c, th·ª≠ PyMuPDF (fitz)
        if not text.strip():
            doc = fitz.open(file_path)
            for page in doc:
                text += page.get_text("text") + "\n"

    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc PDF: {e}")
        raise HTTPException(status_code=500, detail="L·ªói khi ƒë·ªçc n·ªôi dung PDF")

    return text.strip() if text.strip() else "Kh√¥ng t√¨m th·∫•y n·ªôi dung trong PDF"

# üîπ T√°ch t·ª´ng ph·∫ßn c·ª• th·ªÉ (Skills, Education, Projects, Certificates)
def extract_info(cv_text: str) -> Dict:
    extracted_info = {}

    extracted_info["education"] = extract_section(cv_text, ["education", "h·ªçc v·∫•n"])
    extracted_info["skills"] = extract_section(cv_text, ["skills", "skill"])
    extracted_info["certificate"] = extract_section(cv_text, ["certificate", "certification", "certifications"])
    extracted_info["projects"] = extract_section(cv_text, ["project", "projects"])

    return extracted_info

# üîπ H√†m tr√≠ch xu·∫•t n·ªôi dung theo t·ª´ng m·ª•c trong CV
def extract_section(text: str, start_keywords: List[str]) -> str:
    lines = text.split("\n")
    extracted_section = []
    capture = False

    for line in lines:
        if any(keyword.lower() in line.lower() for keyword in start_keywords):
            capture = True
            continue
        if capture and line.strip() == "":
            break
        if capture:
            extracted_section.append(line.strip())

    return "\n".join(extracted_section) if extracted_section else "Kh√¥ng t√¨m th·∫•y"

# üîπ API Upload CV - ƒê·ªçc PDF v√† tr√≠ch xu·∫•t th√¥ng tin
@app.post("/upload-cv")
async def upload_cv(file: UploadFile = File(...)):
    """
    Endpoint ƒë·ªÉ upload CV d·∫°ng file PDF, ƒë·ªçc n·ªôi dung v√† t√°ch th√¥ng tin quan tr·ªçng.
    """
    try:
        filename = file.filename.lower()

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        if not filename.endswith(".pdf"):
            raise HTTPException(status_code=400, detail="Ch·ªâ h·ªó tr·ª£ file PDF")

        # L∆∞u file t·∫°m
        file_path = f"./temp_{filename}"
        with open(file_path, "wb") as f:
            f.write(await file.read())

        # ƒê·ªçc n·ªôi dung PDF
        extracted_text = extract_text_from_pdf(file_path)

        # Ph√¢n t√≠ch n·ªôi dung v√† t√°ch th√¥ng tin quan tr·ªçng
        extracted_data = extract_info(extracted_text)

        return JSONResponse(
            content={
                "filename": filename,
                "message": "Upload v√† tr√≠ch xu·∫•t PDF th√†nh c√¥ng!",
                "extracted_data": extracted_data,
            },
            status_code=200
        )

    except Exception as e:
        print(f"L·ªói khi upload file: {e}")
        raise HTTPException(status_code=500, detail="L·ªói m√°y ch·ªß khi x·ª≠ l√Ω t·ªáp tin")