package com.demo.entities;
// Generated Nov 3, 2024, 6:35:19 PM by Hibernate Tools 4.3.6.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "jobs", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class User implements java.io.Serializable {

	private Integer id;
	private String username;
	private String password;
	private int user_type;
	private String email;
	private Date created;
	private String securityCode;
	private boolean status;
	private Set<Testhistory> testhistories = new HashSet<Testhistory>(0);
	@OneToOne(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY, optional = true)
	private Seeker seeker;
	@OneToOne(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY, optional = true)
	private Employer employer;
	private Set<Test> tests = new HashSet<Test>(0);

	public User() {
	}

	public User(String username, String password, int user_type, String email, Date created, String securityCode,
			boolean status) {
		this.username = username;
		this.password = password;
		this.user_type = user_type;
		this.email = email;
		this.created = created;
		this.securityCode = securityCode;
		this.status = status;
	}

	public User(String username, String password, int user_type, String email, Date created, String securityCode,
			boolean status, Set<Testhistory> testhistories, Seeker seeker, Employer employer, Set<Test> tests) {
		this.username = username;
		this.password = password;
		this.user_type = user_type;
		this.email = email;
		this.created = created;
		this.securityCode = securityCode;
		this.status = status;
		this.testhistories = testhistories;
		this.seeker = seeker;
		this.employer = employer;
		this.tests = tests;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "username", unique = true, nullable = false, length = 250)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 250)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "user_type", nullable = false)
	public int getUser_Type() {
		return this.user_type;
	}

	public void setUser_Type(int user_type) {
		this.user_type = user_type;
	}

	@Column(name = "email", nullable = false, length = 65535)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "created", nullable = false, length = 10)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "security_code", nullable = false, length = 65535)
	public String getSecurityCode() {
		return this.securityCode;
	}

	public void setSecurityCode(String securityCode) {
		this.securityCode = securityCode;
	}

	@Column(name = "status", nullable = false)
	public boolean getStatus() {
		return this.status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Testhistory> getTesthistories() {
		return this.testhistories;
	}

	public void setTesthistories(Set<Testhistory> testhistories) {
		this.testhistories = testhistories;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
	public Seeker getSeeker() {
		return this.seeker;
	}

	public void setSeeker(Seeker seeker) {
		this.seeker = seeker;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
	public Employer getEmployer() {
		return this.employer;
	}

	public void setEmployer(Employer employer) {
		this.employer = employer;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Test> getTests() {
		return this.tests;
	}

	public void setTests(Set<Test> tests) {
		this.tests = tests;
	}

}
